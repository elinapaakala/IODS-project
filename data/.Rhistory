load("J:/March2016/Analysis/Out_PCA_AYRS_454")
ls(output.pca2)
output.pca2$eig
output.pca2$ind
ls(output.pca2$ind)
ls(output.pca2$ind$coord)
output.pca2$ind$coord
output.pca2$ind$contrib
ls(output.pca2$ind)
output.pca2$dist
output.pca2$ind$dist
ls(output.pca2)
output.pca2$svd
output.pca2$var
head(a)
library(dplyr)
c=left.join(a,y,by="Idkar")
FarmMeanEbvs <- read.csv("J:/March2016/Analysis/FarmMeanEbvs.txt", sep="")
View(FarmMeanEbvs)
FarmSystem2 <- read.csv("J:/March2016/Analysis/FarmSystem2.txt", sep="")
View(FarmSystem2)
a=merge(FarmSystem2, FarmMeanEbvs, by="Idkar")
head(a)
library(MASS)
View(a)
View(FarmMeanEbvs)
View(FarmSystem2)
a=merge(FarmMeanEbvs, FarmSystem2, by="Idkar")
View(FarmSystem2)
FarmSystems3=FarmSystems3[!FarmSystems3(x[,1]),]
FarmSystem3=FarmSystem2[!FarmSystem2(x[,1]),]
FarmSystem3=FarmSystem2[!dublicated(FarmSystem2[,1]),]
library(corrgram)
x2=x[!duplicated(x[,38]),]
FarmSystem3=FarmSystem2[!dublicated(FarmSystem2[,1]),]
FarmSystem3=FarmSystem2[!dublicated(FarmSystem2[,1]),]
a2=a[!dublicated(a[,1]),]
FarmSystem3=FarmSystem2[!duplicated(FarmSystem2[,1]),]
a=merge(FarmMeanEbvs, FarmSystem2, by="Idkar")
a=merge(FarmMeanEbvs, FarmSystem3, by="Idkar")
a=5+12
a
v4=v3[v3>3] & v3[v3<50]
v4
v4 <- v3[v3>3 & v3<50]
v4
t(A)
B=A%*%c(1,1,0)
B
B <- solve(A) %*% matrix(c(1,1,0))
B
I=matrix(c(1,0,0,0,1,0,0,0,1), ncol=3, nrow=3, byrow=TRUE)
I
I <- diag(3)
I
D=matrix(1:100, ncol=2)
D[D %% 2 == 0] <- NA
D
D[is.na(D)] <- 0
D
D[is.na(D)==T] <- 0
D
C[C<5] <- rep(12,lukuja)
C <- C[,c(F,T,T,T)]
C <- C[c(T,T,T,T,F),]
C
C <- C[c(T,T,T,T,F),c(F,T,T,T)]
v4 <- c(v3[v3 < 3], v3[v3 > 50])
v4
C <- matrix(c(runif(20, min = 1, max=20)), ncol=4)
length(C[C<5])
#Tehtävä 10
C[C<5]<-12
#Tehtävä 11
C[c(T,T,F),c(F,T,T)]
C=matrix(c(runif(20, min=1, max=20)), ncol=4)
length(C[C<5])
#Tehtävä10
C[C<5] <- 12
C
#Tehtävä11
C[,c(F,T,T,T)]
C[c(T,T,T,T,F),]
C[,c(F,T,T,T)], C[c(T,T,T,T,F),]
C[,c(F,T,T,T), c(T,T,T,T,F),]
C[c(F,T,T,T), c(T,T,T,T,F)]
Herds.by.4.clusters_AYHerd_pca2 <- read.csv("H:/Jatko-opinnot/Data/2015 siemennystiedot/Analyysit/Karjakohtaiset analyysit/AY/AY yli 90%/Herds by 4 clusters_AYHerd_pca2", sep="")
View(Herds.by.4.clusters_AYHerd_pca2)
tapply(Herds.by.4.clusters_AYHerd_pca2$MCN, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$MCN, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
is.numeric(Herds.by.4.clusters_AYHerd_pca2$MCN)
tapply(Herds.by.4.clusters_AYHerd_pca2$CA, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
summary(Herds.by.4.clusters_AYHerd_pca2$MCN)
Herds.by.4.clusters_AYHerd_pca2$MCN<-as.numeric(as.character(Herds.by.4.clusters_AYHerd_pca2$MCN))
tapply(Herds.by.4.clusters_AYHerd_pca2$MCN, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$AD, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
table(Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, Herds.by.4.clusters_AYHerd_pca2$BARN)
summary(Herds.by.4.clusters_AYHerd_pca2$fit4.cluster)
table(Herds.by.4.clusters_AYHerd_pca2$fit4.cluster)
tapply(Herds.by.4.clusters_AYHerd_pca2$Freq.y, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, sum, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$CAG, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$CONS, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$EET, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
table(Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, Herds.by.4.clusters_AYHerd_pca2$FEED)
tapply(Herds.by.4.clusters_AYHerd_pca2$IC, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$INV, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$MI, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
table(Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, Herds.by.4.clusters_AYHerd_pca2$MM)
table(Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, Herds.by.4.clusters_AYHerd_pca2$ORG)
tapply(Herds.by.4.clusters_AYHerd_pca2$STK, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
table(Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, Herds.by.4.clusters_AYHerd_pca2$SUB)
tapply(Herds.by.4.clusters_AYHerd_pca2$LOP, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$EPP, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$EKM, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$KT1, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$PET, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$PP, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
tapply(Herds.by.4.clusters_AYHerd_pca2$SP, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
#vasikkakuolleisuus
tapply(Herds.by.4.clusters_AYHerd_pca2$VK, Herds.by.4.clusters_AYHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
Herds.by.4.clusters_HOLHerd_pca2 <- read.csv("H:/Jatko-opinnot/Data/2015 siemennystiedot/Analyysit/Karjakohtaiset analyysit/HOL yli 90%/Herds by 4 clusters_HOLHerd_pca2", sep="")
View(Herds.by.4.clusters_HOLHerd_pca2)
table(Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster)
tapply(Herds.by.4.clusters_HOLHerd_pca2$AD, Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
st.err <- function(x) {
sd(x)/sqrt(length(x))
}
aggregate(Herds.by.4.clusters_HOLHerd_pca2$AD ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$AD, na.rm=TRUE)
stderr <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))
stderr(Herds.by.4.clusters_HOLHerd_pca2$AD)
tapply(Herds.by.4.clusters_HOLHerd_pca2$BV, Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$BV ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$BV, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$BV)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$CA ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$CA, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$CA)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$CAG ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$CAG, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$CAG)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$CN ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$CN, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$CN)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$CONS ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$CONS, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$CONS)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$EET ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$EET, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$EET)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$EKM ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$EKM, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$EKM)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$EEP ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$EEP, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$EEP)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$EPP ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$EPP, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$EPP)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$IC ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$IC, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$IC)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$INV ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$INV, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$INV)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$KT1 ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$KT1, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$KT1)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$LOP ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$LOP, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$LOP)
tapply(Herds.by.4.clusters_HOLHerd_pca2$MCN, Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, mean, na.rm=TRUE)
is.numeric(Herds.by.4.clusters_HOLHerd_pca2$MCN)
summary(Herds.by.4.clusters_HOLHerd_pca2$MCN)
Herds.by.4.clusters_HOLHerd_pca2$MCN<-as.numeric(as.character(Herds.by.4.clusters_HOLHerd_pca2$MCN))
aggregate(Herds.by.4.clusters_HOLHerd_pca2$MCN ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$MCN, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$MCN)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$MI ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$MI, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$MI)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$PET ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$PET, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$PET)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$PP ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$PP, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$PP)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$PR ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$PR, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$PR)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$SP ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$SP, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$SP)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$STK ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$STK, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$STK)
aggregate(Herds.by.4.clusters_HOLHerd_pca2$VK ~ Herds.by.4.clusters_HOLHerd_pca2$fit4.cluster, Herds.by.4.clusters_HOLHerd_pca2, st.err)
mean(Herds.by.4.clusters_HOLHerd_pca2$VK, na.rm=TRUE)
stderr(Herds.by.4.clusters_HOLHerd_pca2$VK)
setwd("H:/Jatko-opinnot/Open data science/IODS-project/data")
library(readr)
human <- read_csv("H:/Jatko-opinnot/Open data science/IODS-project/data/human")
View(human)
library(readr)
human <- read_csv("H:/Jatko-opinnot/Open data science/IODS-project/data/human",
col_types = cols(X1 = col_skip()))
View(human)
str(human)
human <- mutate(human, GNI = as.numeric)
library(plyr)
human <- mutate(human, GNI = as.numeric)
human <- mutate(GNI = as.numeric(GNI))
human <- mutate(human, GNI = as.numeric(GNI))
str(human)
keep_columns <- c("Country", "PSE_F/PSE_M", "LFPR_F/LFPR_M", "EYE", "LEXP", "GNI", "MMR", "ABR", "PRP")
human_2 <- select(human, one_of(keep_columns))
library(dplyr)
human_2 <- select(human, one_of(keep_columns))
human
#Read the datas into R
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Explore the structure and dimensions of the two datasets
str(hd)
dim(hd)
str(gii)
dim(gii)
#Summaries of the variables
summary(hd)
summary(gii)
#Rename the variables
library(plyr)
hd = rename(hd, c("Human.Development.Index..HDI."="HDI", "Life.Expectancy.at.Birth"="LEXP",
"Expected.Years.of.Education"="EYE", "Mean.Years.of.Education"="MYE",
"Gross.National.Income..GNI..per.Capita"="GNI",
"GNI.per.Capita.Rank.Minus.HDI.Rank"="GNI-HDI"))
gii = rename(gii, c("Gender.Inequality.Index..GII."="GII", "Maternal.Mortality.Ratio"="MMR",
"Adolescent.Birth.Rate"="ABR", "Percent.Representation.in.Parliament"="PRP",
"Population.with.Secondary.Education..Female."="PSE_F",
"Population.with.Secondary.Education..Male."="PSE_M",
"Labour.Force.Participation.Rate..Female."="LFPR_F",
"Labour.Force.Participation.Rate..Male."="LFPR_M"))
#Mutate the "Gender inequality" data
library(dplyr)
#Define a new column with ratio of female and male populations with secondary education
gii <- mutate(gii, ratio_PSE_F_PSE_M = PSE_F/PSE_M)
#Define a new column with ratio of labour force participation of females and males
gii <- mutate(gii, ratio_LFPR_F_LFPR_M = LFPR_F/LFPR_M)
#Join the two datasets by Country
human <- inner_join(hd, gii, by = "Country")
# Save the dataset to data folder
write.csv(human, file = "human")
# Transform the GNI variable to numeric
human <- mutate(human, GNI = as.numeric(GNI))
# Select the column names to keep in the dataset
keep_columns <- c("Country", "PSE_F/PSE_M", "LFPR_F/LFPR_M", "EYE", "LEXP", "GNI", "MMR", "ABR", "PRP")
# select the 'keep_columns' to create a new dataset
human_2 <- select(human, one_of(keep_columns))
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Explore the structure and dimensions of the two datasets
str(hd)
dim(hd)
str(gii)
dim(gii)
#Summaries of the variables
summary(hd)
summary(gii)
library(plyr)
hd = rename(hd, c("Human.Development.Index..HDI."="HDI", "Life.Expectancy.at.Birth"="LEXP",
"Expected.Years.of.Education"="EYE", "Mean.Years.of.Education"="MYE",
"Gross.National.Income..GNI..per.Capita"="GNI",
"GNI.per.Capita.Rank.Minus.HDI.Rank"="GNI-HDI"))
human <- read.txt("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/", sep=";", header=TRUE)
human <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/", sep=";", header=TRUE)
str(hd)
library(plyr)
hd = rename(hd, c("HDI.Rank"="HDI.Rank", "Country"="Country",
"Human.Development.Index..HDI."="HDI",
"Life.Expectancy.at.Birth"="LEXP",
"Expected.Years.of.Education"="EYE",
"Mean.Years.of.Education"="MYE",
"Gross.National.Income..GNI..per.Capita"="GNI",
"GNI.per.Capita.Rank.Minus.HDI.Rank"="GNI-HDI"))
plyr::hd = rename(hd, c("HDI.Rank"="HDI.Rank", "Country"="Country",
"Human.Development.Index..HDI."="HDI",
"Life.Expectancy.at.Birth"="LEXP",
"Expected.Years.of.Education"="EYE",
"Mean.Years.of.Education"="MYE",
"Gross.National.Income..GNI..per.Capita"="GNI",
"GNI.per.Capita.Rank.Minus.HDI.Rank"="GNI-HDI"))
plyr::gii = rename(gii, c("Gender.Inequality.Index..GII."="GII", "Maternal.Mortality.Ratio"="MMR",
"Adolescent.Birth.Rate"="ABR", "Percent.Representation.in.Parliament"="PRP",
"Population.with.Secondary.Education..Female."="PSE_F",
"Population.with.Secondary.Education..Male."="PSE_M",
"Labour.Force.Participation.Rate..Female."="LFPR_F",
"Labour.Force.Participation.Rate..Male."="LFPR_M"))
hd = rename(hd, c("HDI" = "Human.Development.Index..")
,
"Life.Expectancy.at.Birth"="LEXP",
"Expected.Years.of.Education"="EYE",
"Mean.Years.of.Education"="MYE",
"Gross.National.Income..GNI..per.Capita"="GNI",
"GNI.per.Capita.Rank.Minus.HDI.Rank"="GNI-HDI"))
hd = rename(hd, c("HDI" = "Human.Development.Index..")
hd
summary(hd)
hd = rename(hd, c("HDI" = "Human.Development.Index..",
"LEXP" = "Life.Expectancy.at.Birth",
"EYE" = "Expected.Years.of.Education",
"MYE" = "Mean.Years.of.Education",
"GNI" = "Gross.National.Income..GNI..per.Capita",
"GNI-HDI" = "GNI.per.Capita.Rank.Minus.HDI.Rank"))
human <- read.txt("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=";", header=TRUE)
?read.txt
?read
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=";", header=TRUE)
summary/human
human <- read("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=";", header=TRUE)
human <- read.file("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=";", header=TRUE)
human <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=";", header=TRUE)
summary/human
human <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=",", header=TRUE)
summary/human
summary(human)
human
human <- mutate(human, GNI = as.numeric(GNI))
str(human)
keep_columns <- c("Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human_2 <- select(human, one_of(keep_columns))
human_3 <- filter(human_2, complete.cases(human_2))
summary(human_3)
human_3
View(human_3)
tail(human_3, n=10)
last <- nrow(human_3) - 7
# choose everything until the last 7 observations
human_3 <- human[1:last, ]
tail(human_3, n=10)
rownames(human_3) <- human_3$Country
human <- select(human_3, -Country)
str(human)
human3 <- select(human_3, -Country)
str(human_3)
tail(human_3, n=10)
human <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=",", header=TRUE)
summary(human)
# Transform the GNI variable to numeric
human <- mutate(human, GNI = as.numeric(GNI))
# Select the column names to keep in the dataset
keep_columns <- c("Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
# Select the kept columns to create a new dataset
human_2 <- select(human, one_of(keep_columns))
# Remove all rows with missing values
# Filter out all rows with NA values
human_3 <- filter(human_2, complete.cases(human_2))
summary(human_3)
human_3
# Remove the observations not relating to countries
# look at the last 10 observations of human
tail(human_3, n=10)
# define the last indice we want to keep
last <- nrow(human_3) - 7
# choose everything until the last 7 observations
human_3 <- human[1:last, ]
# add countries as rownames
rownames(human_3) <- human_3$Country
# remove the country name column
human3 <- select(human_3, -Country)
str(human_3)
human <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=",", header=TRUE)
summary(human)
# Transform the GNI variable to numeric
human <- mutate(human, GNI = as.numeric(GNI))
# Select the column names to keep in the dataset
keep_columns <- c("Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
# Select the kept columns to create a new dataset
human_2 <- select(human, one_of(keep_columns))
human_2
str(human_2)
human_3 <- filter(human_2, complete.cases(human_2))
summary(human_3)
str(human_3)
tail(human_3, n=10)
human_3 <- human[1:last, ]
rownames(human_3) <- human_3$Country
human3 <- select(human_3, -Country)
str(human_3)
human <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=",", header=TRUE)
summary(human)
# Transform the GNI variable to numeric
human <- mutate(human, GNI = as.numeric(GNI))
# Select the column names to keep in the dataset
keep_columns <- c("Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
# Select the kept columns to create a new dataset
human_2 <- select(human, one_of(keep_columns))
# Remove all rows with missing values
# Filter out all rows with NA values
human_3 <- filter(human_2, complete.cases(human_2))
tail(human_3, n=10)
last <- nrow(human_3) - 7
human_3 <- human[1:last, ]
tail(human_3, n=10)
rownames(human_3) <- human_3$Country
tail(human_3, n=10)
human <- select(human3, -Country)
human <- select(human_3, -Country)
str(human)
tail(human_3, n=10)
#Read in the data
human <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=",", header=TRUE)
summary(human)
# Transform the GNI variable to numeric
human <- mutate(human, GNI = as.numeric(GNI))
# Select the column names to keep in the dataset
keep_columns <- c("Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
# Select the kept columns to create a new dataset
human <- select(human, one_of(keep_columns))
# Remove all rows with missing values
# Filter out all rows with NA values
human_ <- filter(human, complete.cases(human))
# Remove the observations not relating to countries
# look at the last 10 observations of human
tail(human, n=10)
# define the last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human_ <- human[1:last, ]
# add countries as rownames
rownames(human_) <- human_$Country
# remove the country name column
human_ <- select(human, -Country)
str(human_)
summary(human_)
human <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=",", header=TRUE)
summary(human)
# Transform the GNI variable to numeric
human <- mutate(human, GNI = as.numeric(GNI))
# Select the column names to keep in the dataset
keep_columns <- c("Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
# Select the kept columns to create a new dataset
human <- select(human, one_of(keep_columns))
### Remove all rows with missing values
# print out a completeness indicator of the 'human' data
complete.cases(human)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# Filter out all rows with NA values
human_ <- filter(human, complete.cases(human))
### Remove the observations not relating to countries
# look at the last 10 observations of human
tail(human, n=10)
# define the last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human_ <- human[1:last, ]
# add countries as rownames
rownames(human_) <- human_$Country
# remove the country name column
human_ <- select(human, -Country)
str(human_)
summary(human_)
human <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=",", header=TRUE)
summary(human)
human <- mutate(human, GNI = as.numeric(GNI))
# Select the column names to keep in the dataset
keep_columns <- c("Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
# Select the kept columns to create a new dataset
human <- select(human, one_of(keep_columns))
complete.cases(human)
data.frame(human[-1], comp = complete.cases(human))
human_ <- filter(human, complete.cases(human))
str(human_)
tail(human, n=10)
last <- nrow(human) - 7
human_ <- human[1:last, ]
rownames(human_) <- human_$Country
str(human_)
human_
tail(human_, n=10)
str(human_)
human_ <- select(human_, -Country)
str(human_)
tail(human_, n=10)
human <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep=",", header=TRUE)
summary(human)
# Transform the GNI variable to numeric
human <- mutate(human, GNI = as.numeric(GNI))
# Select the column names to keep in the dataset
keep_columns <- c("Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
# Select the kept columns to create a new dataset
human <- select(human, one_of(keep_columns))
### Remove all rows with missing values
# print out a completeness indicator of the 'human' data
complete.cases(human)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# Filter out all rows with NA values
human_ <- filter(human, complete.cases(human))
### Remove the observations not relating to countries
# look at the last 10 observations of human
tail(human_, n=10)
# define the last indice we want to keep
last <- nrow(human_) - 7
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
str(human_)
rownames(human_) <- human_$Country
human_ <- select(human_, -Country)
str(human_)
human_
write.csv(human, file = "human")
